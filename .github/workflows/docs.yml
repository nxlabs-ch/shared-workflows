name: Build Documentation

on:
  workflow_call:
    inputs:
      version:
        description: "The version string for this release"
        required: true
        type: string
      pdf-name:
        description: "The name of the PDF file generated by latexpdf, as set in your conf.py"
        required: true
        type: string
      docs-folder:
        description: "The path to the docs folder from the root of the project, defaults to docs"
        default: docs
        required: false
        type: string
      dependencies:
        description: "Additional pip dependencies"
        required: false
        type: string
      lfs:
        description: "Whether to pull LFS files, defaults to false"
        required: false
        type: boolean
        default: false

jobs:
  build-documentation:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ inputs.lfs }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Sphinx==8.2.1 myst-parser==4.0.1 jinja2

      - name: Install additional pip dependencies
        if: "${{ inputs.dependencies != '' }}"
        run: pip install ${{ inputs.dependencies }}

      - name: Install additional packages for documentation building
        run: |
          sudo apt-get update && sudo apt-get install -y \
            texlive=2023.20240207-1 \
            texlive-latex-extra=2023.20240207-1 \
            latexmk

      - name: Save Version
        run:  echo ${{ inputs.version }} > .version

      - name: Extract project name from conf.py
        id: project-name
        run: |
          PROJECT_NAME=$(python -c "
          import sys
          import re
          sys.path.insert(0, '${{ inputs.docs-folder }}')
          
          # Read conf.py and extract project name using regex
          try:
              with open('${{ inputs.docs-folder }}/conf.py', 'r') as f:
                  content = f.read()
              
              # Look for project = 'value' or project = \"value\"
              match = re.search(r'project\s*=\s*[\'\"](.*?)[\'\"]', content)
              if match:
                  project_name = match.group(1)
                  print(project_name.lower().replace(' ', '-'))
              else:
                  print('no-name')
          except Exception:
              print('no-name')
          ")
          echo "name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "Extracted project name: $PROJECT_NAME"

      - name: Build documentation
        run: |
          make -C ${{ inputs.docs-folder }} html
          make -C ${{ inputs.docs-folder }} latexpdf

      - uses: actions/upload-artifact@v4
        with:
          name: documentation-std-${{ steps.project-name.outputs.name }}-html-${{ inputs.version }}
          path: docs/_build/html/

      - name: Rename PDF with version
        run: |
          PDF_DIR="${{ inputs.docs-folder }}/_build/latex"
          ORIGINAL_PDF="${{ inputs.pdf-name }}"
          # Extract filename without extension
          PDF_BASE=$(basename "$ORIGINAL_PDF" .pdf)
          # Create new filename with version
          NEW_PDF="${PDF_BASE}-${{ inputs.version }}.pdf"
          # Rename the PDF file
          mv "$PDF_DIR/$ORIGINAL_PDF" "$PDF_DIR/$NEW_PDF"
          echo "new-pdf-name=$NEW_PDF" >> $GITHUB_OUTPUT
        id: rename-pdf

      - uses: actions/upload-artifact@v4
        with:
          name: documentation-std-${{ steps.project-name.outputs.name }}-pdf-${{ inputs.version }}
          path: "${{ inputs.docs-folder }}/_build/latex/${{ steps.rename-pdf.outputs.new-pdf-name }}"
