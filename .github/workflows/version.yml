name: Semantic Version Management

on:
  workflow_call:
    inputs:
      preface:
        description: "The file path whose content to use as preface for the release notes, in markdown format"
        required: false
        type: string
      postface:
        description: "The file path whose content to use as postface for the release notes, in markdown format"
        required: false
        type: string
    secrets:
      FF_MERGE_PAT:
        description: "A personal access token (PAT) with repo permissions to perform the FF merge from main to develop on releases"
        required: true
    outputs:
      version:
        description: "The calculated version"
        value: ${{ jobs.prepare-release.outputs.version }}
      tag:
        description: "The new tag if any"
        value: ${{ jobs.prepare-release.outputs.tag }}
      pep440:
        description: "The PEP440 compatible version for python packages"
        value: ${{ jobs.prepare-release.outputs.pep440 }}
      preface_content:
        description: "The content of the preface file"
        value: ${{ jobs.prepare-release.outputs.preface_content }}
      preface_content_escaped:
        description: "The content of the preface file, with special characters escaped"
        value: ${{ jobs.prepare-release.outputs.preface_content_escaped }}
      postface_content:
        description: "The content of the postface file"
        value: ${{ jobs.prepare-release.outputs.postface_content }}
      postface_content_escaped:
        description: "The content of the postface file, with special characters escaped"
        value: ${{ jobs.prepare-release.outputs.postface_content_escaped }}
      changelog:
        description: "The generated changelog content"
        value: ${{ jobs.prepare-release.outputs.changelog }}

jobs:
  prepare-release:
    runs-on: ubuntu-24.04
    steps:
      - name: Pre-calculate for PR to main
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
        id: version-pr
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          create_annotated_tag: true
          default_bump: false
          custom_release_rules: api:minor:API Changes,breaking:major:Major Changes,build:patch:Build Systems,ci:patch:Continuous Integration,doc:patch:Documentation,docs:patch:Documentation,feature:minor:Features,fix:patch:Bug Fixes,perf:patch:Performance Improvements,refactor:patch:Code Refactoring,revert:minor:Reverts,test:patch:Tests
          dry_run: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Read preface file
        if: ${{ inputs.preface != '' }}
        id: preface
        run: |
          {
            echo 'preface<<EOF'
            cat ${{ inputs.preface }}
            echo
            echo EOF
          } >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Read and escape preface file
        id: preface_escaped
        run: |
          if [ -n "${{ inputs.preface }}" ] && [ -f "${{ inputs.preface }}" ]; then
            {
              echo 'preface_escaped<<EOF'
              sed -e 's/\\/\\\\/g' -e 's/`/\\`/g' -e 's/"/\\"/g' -e "s/'/\\'/g" -e 's/\$/\\$/g' "${{ inputs.preface }}"
              echo
              echo EOF
            } >> "$GITHUB_OUTPUT"
          else
            echo 'preface_escaped=' >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Read postface file
        if: ${{ inputs.postface != '' }}
        id: postface
        run: |
          {
            echo 'postface<<EOF'
            cat ${{ inputs.postface }}
            echo
            echo EOF
          } >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Read and escape postface file
        id: postface_escaped
        run: |
          if [ -n "${{ inputs.postface }}" ] && [ -f "${{ inputs.postface }}" ]; then
            {
              echo 'postface_escaped<<EOF'
              sed -e 's/\\/\\\\/g' -e 's/`/\\`/g' -e 's/"/\\"/g' -e "s/'/\\'/g" -e 's/\$/\\$/g' "${{ inputs.postface }}"
              echo
              echo EOF
            } >> "$GITHUB_OUTPUT"
          else
            echo 'postface_escaped=' >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: New version/tag as comment in PR
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.preface.outputs.preface }}
            # New release
            This PR was detected as a new release, see release details below.
            If you are ok to release with those values, please approve the PR.

            ## Version `${{ steps.version-pr.outputs.new_version }}`
            The new release will be `${{ steps.version-pr.outputs.new_version }}`, update from `${{ steps.version-pr.outputs.previous_version }}`

            ## TAG `${{ steps.version-pr.outputs.new_tag }}`
            The new tag will be `${{ steps.version-pr.outputs.new_tag }}`, update from `${{ steps.version-pr.outputs.previous_tag }}`

            ## Changelog
            ${{ steps.version-pr.outputs.changelog }}
            ${{ steps.postface.outputs.postface }}
          reactions: 'eyes'

      - name: Bump version and push tag
        if: github.ref == 'refs/heads/main'
        id: version-main
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ steps.merge.outputs.merge_sha }}
          release_branches: main
          create_annotated_tag: true
          default_bump: false
          custom_release_rules: api:minor:API Changes,breaking:major:Major Changes,build:patch:Build Systems,ci:patch:Continuous Integration,doc:patch:Documentation,docs:patch:Documentation,feature:minor:Features,fix:patch:Bug Fixes,perf:patch:Performance Improvements,refactor:patch:Code Refactoring,revert:minor:Reverts,test:patch:Tests

      - name: Create GitHub release with changelog
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version-main.outputs.new_tag }}
          name: Release ${{ steps.version-main.outputs.new_tag }}
          body: |-
            ${{ steps.preface.outputs.preface }}
            ${{ steps.version-main.outputs.changelog }}
            ${{ steps.postface.outputs.postface }}

      - name: Outputs for PR
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
        run: echo "NEW_TAG=${{ steps.version-pr.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Outputs for main
        if: github.ref == 'refs/heads/main'
        run: |
          echo "NEW_TAG=${{ steps.version-main.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Get tags
        run: git fetch --prune --unshallow --tags
      
      - name: Set Version
        run: |
          TAG_VERSION_NUMBER=$(git describe --tags --dirty)
          echo "VERSION_NUMBER=${TAG_VERSION_NUMBER:1}" >> $GITHUB_ENV
          PEP440=$(git describe --tags --dirty | sed -e 's/v//' | sed -e 's/-/.dev/' | sed -e 's/-g.*//')
          echo "PEP440_VERSION_NUMBER=${PEP440}" >> $GITHUB_ENV
        shell: bash

      - name: Display outputs
        run: |
          echo "Version is ${{ env.VERSION_NUMBER }}"
          echo "TAG is ${{ env.NEW_TAG }}"
          echo "PEP440 is ${{ env.PEP440_VERSION_NUMBER }}"
        shell: bash

      - name: Check if Commit is a merge to main
        if: github.ref == 'refs/heads/main'
        id: check-merge
        run: |
          MERGE_COMMIT=$(git rev-parse HEAD)
          PARENTS=$(git rev-list --parents -n 1 $MERGE_COMMIT)
          echo "Merge commit: $MERGE_COMMIT"
          echo "Parents: $PARENTS"
          if [ $(echo $PARENTS | wc -w) -gt 2 ]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
          fi

      - name: FF merge to develop if merge to main from PR
        if: ${{ github.ref == 'refs/heads/main' && steps.check-merge.outputs.is_merge == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.FF_MERGE_PAT }}
        run: |
          echo "Merge to \`main\` detected. Proceeding with FF merge back to \`develop\`..."
          
          # Get the current commit SHA of main
          MAIN_SHA=$(git rev-parse HEAD)
          echo "Main SHA: $MAIN_SHA"
          
          # Update develop branch to point to the same commit as main using GitHub API
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/develop" \
            -d "{\"sha\":\"$MAIN_SHA\",\"force\":true}"

    outputs:
      version: ${{ env.VERSION_NUMBER }}
      tag: ${{ env.NEW_TAG }}
      pep440: ${{ env.PEP440_VERSION_NUMBER }}
      preface_content: ${{ steps.preface.outputs.preface }}
      preface_content_escaped: ${{ steps.preface_escaped.outputs.preface_escaped }}
      postface_content: ${{ steps.postface.outputs.postface }}
      postface_content_escaped: ${{ steps.postface_escaped.outputs.postface_escaped }}
      changelog: ${{ steps.version-main.outputs.changelog || steps.version-pr.outputs.changelog || '' }}
